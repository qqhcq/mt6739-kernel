name: Extreme Fast Build (5-10 mins)

on:
  workflow_dispatch:
  
jobs:
  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    
    steps:
    - name: 检出代码（最小化）
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
    
    - name: 缓存完整工具链
      id: cache-toolchain
      uses: actions/cache@v3
      with:
        path: gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu
        key: toolchain-linaro-7.5.0-aarch64
    
    - name: 缓存 ccache
      uses: actions/cache@v3
      with:
        path: ~/.ccache
        key: ccache-extreme-${{ github.sha }}
        restore-keys: ccache-extreme-
    
    - name: 安装最小依赖（仅必需）
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          gcc-aarch64-linux-gnu build-essential bc bison \
          flex libssl-dev ccache
    
    - name: 下载工具链
      if: steps.cache-toolchain.outputs.cache-hit != 'true'
      run: |
        wget -q https://releases.linaro.org/components/toolchain/binaries/7.5-2019.12/aarch64-linux-gnu/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu.tar.xz
        tar xf gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu.tar.xz
        rm gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu.tar.xz
    
    - name: 配置 ccache
      run: |
        ccache -M 2G
        ccache -z
        echo "/usr/lib/ccache" >> $GITHUB_PATH
    
    - name: 极速配置（最小化模块）
      run: |
        export PATH=$PWD/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/bin:$PATH
        export ARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-
        
        # 查找配置
        CONFIG=$(find arch/arm64/configs -name "*6739*" -o -name "*k39tv1*" | head -1)
        [ -z "$CONFIG" ] && CONFIG=$(find arch/arm64/configs -name "*6763*" | head -1)
        [ -z "$CONFIG" ] && CONFIG="arch/arm64/configs/defconfig"
        
        echo "使用配置: $CONFIG"
        make -j$(nproc) $(basename $CONFIG)
        
        # 禁用所有调试、签名、模块
        scripts/config --disable MODULE_SIG
        scripts/config --disable MODULE_SIG_ALL
        scripts/config --disable SYSTEM_TRUSTED_KEYRING
        scripts/config --disable SYSTEM_TRUSTED_KEYS
        scripts/config --disable DEBUG_INFO
        scripts/config --disable DEBUG_INFO_DWARF4
        scripts/config --disable DEBUG_INFO_BTF
        scripts/config --disable GDB_SCRIPTS
        scripts/config --disable DEBUG_KERNEL
        scripts/config --disable DEBUG_FS
        scripts/config --disable FTRACE
        scripts/config --disable KPROBES
        scripts/config --disable UPROBES
        scripts/config --disable TRACING
        
        # 禁用不必要的驱动（保留核心功能）
        scripts/config --disable SOUND
        scripts/config --disable SND
        scripts/config --disable MEDIA_SUPPORT
        scripts/config --disable DRM
        scripts/config --disable STAGING
        scripts/config --disable WIRELESS
        scripts/config --disable WLAN
        scripts/config --disable BT
        
        # 启用必需的 USB ACM
        scripts/config --enable USB_GADGET
        scripts/config --enable USB_CONFIGFS
        scripts/config --enable USB_CONFIGFS_ACM
        scripts/config --enable USB_F_ACM
        
        make -j$(nproc) olddefconfig
    
    - name: 超高速编译（极致优化）
      run: |
        export PATH=/usr/lib/ccache:$PWD/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/bin:$PATH
        export ARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-
        export KCFLAGS="-w -O2 -pipe"
        export KCPPFLAGS="-w"
        
        # 使用最大并行数
        JOBS=$(($(nproc) * 2))
        echo "使用 $JOBS 个并行任务"
        
        # 只编译内核镜像，跳过模块
        time make -j$JOBS Image.gz-dtb INSTALL_MOD_STRIP=1 2>&1 | grep -E "(CC|LD|GZ)" | tail -20 || \
        time make -j$JOBS Image.gz INSTALL_MOD_STRIP=1 2>&1 | grep -E "(CC|LD|GZ)" | tail -20 || \
        time make -j$JOBS Image INSTALL_MOD_STRIP=1 2>&1 | grep -E "(CC|LD|GZ)" | tail -20
    
    - name: ccache 统计
      run: ccache -s
    
    - name: 打包
      run: |
        mkdir output
        find arch/arm64/boot -type f -name "Image*" -exec cp {} output/ \;
        
        cat > output/README.txt << EOF
        极速编译版本 (Extreme Fast)
        ============================
        编译时间: $(date)
        特点: 已禁用调试、音频、视频、无线等不必要功能
        仅保留核心功能和 USB ACM 串口支持
        
        适用于: D22 对讲机刷机
        EOF
        
        ls -lh output/
    
    - name: 上传
      uses: actions/upload-artifact@v3
      with:
        name: kernel-extreme-fast-${{ github.run_number }}
        path: output/*

