name: Build MT6739 Kernel with ACM Support

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 120
    
    steps:
    - name: 最大化构建空间
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        df -h
        
    - name: 克隆 Kernel 源码
      run: |
        git clone --depth=1 https://github.com/5059d/kernel_5059d_mt6739_tcl.git
        cd kernel_5059d_mt6739_tcl/kernel-4.4
        echo "源码克隆完成"
        ls -lah
        
    - name: 安装编译依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential bc bison flex libssl-dev libncurses-dev python3 python-is-python3
        
    - name: 下载交叉编译工具链
      run: |
        wget -q https://releases.linaro.org/components/toolchain/binaries/7.5-2019.12/aarch64-linux-gnu/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu.tar.xz
        tar -xf gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu.tar.xz
        echo "TOOLCHAIN_PATH=$PWD/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-" >> $GITHUB_ENV
        
    - name: 修复 Python 2/3 兼容性
      run: |
        cd kernel_5059d_mt6739_tcl/kernel-4.4
        
        # 修复 tools/dct/DrvGen.py
        if [ -f "tools/dct/DrvGen.py" ]; then
          echo "修复 tools/dct/DrvGen.py"
          # 在文件开头添加 cmp 函数
          echo 'def cmp(a, b):
    return (a > b) - (a < b)
' | cat - tools/dct/DrvGen.py > temp && mv temp tools/dct/DrvGen.py
          # 修复 print 语句 - 只修复明确的 print 语句
          sed -i "s/print '/print('/g" tools/dct/DrvGen.py
          sed -i 's/print "/print("/g' tools/dct/DrvGen.py
          sed -i 's/, *$/)/g' tools/dct/DrvGen.py
        fi
        
        # 修复 DTC yylloc 问题
        if [ -f "scripts/dtc/dtc-lexer.lex.c" ]; then
          echo "修复 DTC yylloc"
          sed -i 's/^YYLTYPE yylloc;$/extern YYLTYPE yylloc;/' scripts/dtc/dtc-lexer.lex.c
        fi
        
        echo "修复完成"
        
    - name: 配置 Kernel
      run: |
        cd kernel_5059d_mt6739_tcl/kernel-4.4
        make ARCH=arm64 CROSS_COMPILE=${{ env.TOOLCHAIN_PATH }} k39tv1_64_bsp_defconfig
        # 自动应用默认配置
        yes "" | make ARCH=arm64 CROSS_COMPILE=${{ env.TOOLCHAIN_PATH }} oldconfig || true
        
    - name: 编译 Kernel
      run: |
        cd kernel_5059d_mt6739_tcl/kernel-4.4
        echo "开始编译..."
        
        # 尝试编译 Image
        if make ARCH=arm64 CROSS_COMPILE=${{ env.TOOLCHAIN_PATH }} -j$(nproc) Image 2>&1 | tee build.log; then
          echo "✅ Image 编译成功"
        else
          echo "⚠️ Image 编译失败，尝试编译 vmlinux"
          make ARCH=arm64 CROSS_COMPILE=${{ env.TOOLCHAIN_PATH }} -j$(nproc) vmlinux 2>&1 | tee -a build.log
        fi
        
    - name: 检查编译产物
      run: |
        cd kernel_5059d_mt6739_tcl/kernel-4.4
        echo "=== 检查编译结果 ==="
        
        if [ -f arch/arm64/boot/Image.gz-dtb ]; then
          echo "✅ 找到 Image.gz-dtb"
          ls -lh arch/arm64/boot/Image.gz-dtb
          cp arch/arm64/boot/Image.gz-dtb ../kernel_image
        elif [ -f arch/arm64/boot/Image.gz ]; then
          echo "✅ 找到 Image.gz"
          ls -lh arch/arm64/boot/Image.gz
          cp arch/arm64/boot/Image.gz ../kernel_image
        elif [ -f arch/arm64/boot/Image ]; then
          echo "✅ 找到 Image"
          ls -lh arch/arm64/boot/Image
          cp arch/arm64/boot/Image ../kernel_image
        elif [ -f vmlinux ]; then
          echo "⚠️ 只找到 vmlinux"
          ls -lh vmlinux
          cp vmlinux ../kernel_image
        else
          echo "❌ 未找到任何 kernel 文件"
          tail -n 100 build.log
          exit 1
        fi
        
    - name: 上传 Kernel
      uses: actions/upload-artifact@v4
      with:
        name: mt6739-kernel-acm
        path: kernel_5059d_mt6739_tcl/kernel_image
        retention-days: 7
        
    - name: 上传编译日志
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-log
        path: kernel_5059d_mt6739_tcl/kernel-4.4/build.log
        retention-days: 3
        
    - name: 创建 Release
      if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v1.0-${{ github.run_number }}
        name: MT6739 Kernel with ACM - Build ${{ github.run_number }}
        body: |
          ## MT6739 Kernel with USB ACM Support
          
          **Build Number:** ${{ github.run_number }}
          **Build Date:** ${{ github.event.head_commit.timestamp }}
          **Commit:** ${{ github.sha }}
          
          ### Features
          - ✅ USB ACM (Serial) Support
          - ✅ USB ADB Support  
          - ✅ USB MTP Support
          
          ### Usage
          1. Download kernel_image
          2. Replace kernel in your boot.img
          3. Repack boot.img
          4. Flash to device
          
        files: kernel_5059d_mt6739_tcl/kernel_image
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
