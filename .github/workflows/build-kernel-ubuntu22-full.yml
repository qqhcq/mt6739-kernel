name: Ubuntu 22.04 Full Speed Build (Complete Drivers)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  
jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    
    steps:
    - name: 检出代码（浅克隆）
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: 快速清理磁盘
      run: |
        sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY" /usr/local/lib/android &
        df -h
    
    - name: 缓存 ccache（关键加速）
      uses: actions/cache@v4
      with:
        path: ~/.ccache
        key: ccache-u22-full-${{ github.sha }}
        restore-keys: ccache-u22-full-
    
    - name: 缓存工具链
      id: cache-toolchain
      uses: actions/cache@v4
      with:
        path: gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu
        key: toolchain-linaro-7.5.0
    
    - name: 安装依赖（Ubuntu 22.04 优化）
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          build-essential bc bison flex libssl-dev \
          libncurses-dev ccache wget ca-certificates \
          python3 python-is-python3 lz4 cpio
    
    - name: 下载工具链
      if: steps.cache-toolchain.outputs.cache-hit != 'true'
      run: |
        wget -q https://releases.linaro.org/components/toolchain/binaries/7.5-2019.12/aarch64-linux-gnu/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu.tar.xz
        tar xf gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu.tar.xz
        rm gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu.tar.xz
    
    - name: 配置 ccache（最大化缓存）
      run: |
        ccache -M 3G
        ccache -z
        ccache --set-config=compression=true
        ccache --set-config=compression_level=1
    
    - name: 配置内核（完整驱动）
      run: |
        export PATH=$PWD/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/bin:$PATH
        export ARCH=arm64
        export CROSS_COMPILE="ccache aarch64-linux-gnu-"
        
        # 查找配置
        CONFIG=$(find arch/arm64/configs -name "*6739*" -o -name "*k39tv1*" | head -1)
        [ -z "$CONFIG" ] && CONFIG=$(find arch/arm64/configs -name "*6763*" | head -1)
        [ -z "$CONFIG" ] && CONFIG="arch/arm64/configs/defconfig"
        
        echo "使用配置: $CONFIG"
        make -j$(nproc) $(basename $CONFIG)
        
        # 只禁用签名相关（避免 OpenSSL 3.x 问题）
        scripts/config --disable MODULE_SIG
        scripts/config --disable MODULE_SIG_ALL
        scripts/config --disable SYSTEM_TRUSTED_KEYRING
        scripts/config --disable SYSTEM_TRUSTED_KEYS
        
        # 禁用调试信息（减少编译时间，不影响功能）
        scripts/config --disable DEBUG_INFO
        scripts/config --disable DEBUG_INFO_DWARF4
        scripts/config --disable DEBUG_INFO_BTF
        scripts/config --disable GDB_SCRIPTS
        
        # 启用 USB ACM
        scripts/config --enable USB_GADGET
        scripts/config --enable USB_CONFIGFS
        scripts/config --enable USB_CONFIGFS_ACM
        scripts/config --enable USB_F_ACM
        
        make -j$(nproc) olddefconfig
    
    - name: 高速编译（完整功能 + 所有驱动）
      run: |
        export PATH=$PWD/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/bin:$PATH
        export ARCH=arm64
        export CROSS_COMPILE="ccache aarch64-linux-gnu-"
        export KCFLAGS="-w -O2 -pipe -fno-stack-protector"
        export KCPPFLAGS="-w"
        
        # 最大并行编译
        JOBS=$(($(nproc) * 2))
        echo "=========================================="
        echo "🚀 开始编译 - 使用 $JOBS 个并行任务"
        echo "=========================================="
        
        time make -j$JOBS Image.gz-dtb 2>&1 | tee build.log || \
        time make -j$JOBS Image.gz 2>&1 | tee build.log || \
        time make -j$JOBS Image 2>&1 | tee build.log
        
        echo "=========================================="
        echo "✅ 编译完成"
        echo "=========================================="
    
    - name: 显示 ccache 统计
      run: |
        echo "=========================================="
        echo "📊 ccache 缓存统计"
        echo "=========================================="
        ccache -s
    
    - name: 检查编译结果
      id: check
      run: |
        if [ -f arch/arm64/boot/Image.gz-dtb ]; then
          KERNEL_FILE="arch/arm64/boot/Image.gz-dtb"
          KERNEL_NAME="Image.gz-dtb"
          echo "✅ 找到: Image.gz-dtb"
        elif [ -f arch/arm64/boot/Image.gz ]; then
          KERNEL_FILE="arch/arm64/boot/Image.gz"
          KERNEL_NAME="Image.gz"
          echo "✅ 找到: Image.gz"
        elif [ -f arch/arm64/boot/Image ]; then
          KERNEL_FILE="arch/arm64/boot/Image"
          KERNEL_NAME="Image"
          echo "✅ 找到: Image"
        else
          echo "❌ 编译失败！"
          tail -n 100 build.log
          exit 1
        fi
        
        echo "KERNEL_FILE=$KERNEL_FILE" >> $GITHUB_ENV
        echo "KERNEL_NAME=$KERNEL_NAME" >> $GITHUB_ENV
        echo "success=true" >> $GITHUB_OUTPUT
        
        ls -lh $KERNEL_FILE
    
    - name: 打包发布
      if: steps.check.outputs.success == 'true'
      run: |
        mkdir output
        cp $KERNEL_FILE output/kernel-mt6739-full.img
        cp .config output/kernel.config
        
        cat > output/BUILD_INFO.txt << EOF
        MT6739 完整内核编译信息
        ========================
        编译环境: Ubuntu 22.04
        编译时间: $(date)
        Git Commit: ${{ github.sha }}
        内核版本: $(make kernelrelease)
        工具链: Linaro GCC 7.5.0
        
        特性:
        ✅ 完整驱动（未删减任何功能）
        ✅ USB ACM 串口支持
        ✅ 所有音频/视频/网络驱动
        ✅ ccache 加速编译
        
        适用设备: D22 对讲机
        EOF
        
        echo "=========================================="
        echo "📦 打包内容:"
        ls -lh output/
        echo "=========================================="
    
    - name: 上传内核
      if: steps.check.outputs.success == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: kernel-ubuntu22-full-${{ github.run_number }}
        path: output/*
        retention-days: 30
    
    - name: 上传编译日志
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-log-${{ github.run_number }}
        path: build.log
        retention-days: 7

